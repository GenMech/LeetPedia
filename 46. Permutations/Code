class Solution {
    public List<List<Integer>> permute(int[] nums) {
        // 2nd approach reducing space complexity
        
        List<List<Integer>> ans = new ArrayList<>();
        helper(0, nums, ans);
        return ans;
        
    }
    
    public void helper(int ind, int[] nums, List<List<Integer>> ans){
        
        if(ind == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i: nums){
                ds.add(i);
            }
           ans.add(new ArrayList<>(ds)); 
           return;
        }
        
        for(int i = ind; i < nums.length; i++){
            swap(i, ind, nums);
            helper(ind+1, nums, ans);
            swap(i, ind, nums); // whenever comeback from recursion make sure to reswap it (simple backtracking)
        }
    }
    
    public void swap(int i, int j, int[] nums){
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
}
