class Solution {
    public void solveSudoku(char[][] board) {
        helper(board);
    }
    
    public boolean helper(char[][] board){
        
        int n = board.length;
        int m = board[0].length;
        
        for(int i = 0; i < n; i++){
           for(int j = 0; j < m; j++){
              
               if(board[i][j] == '.'){
                   
                  for(char c = '1'; c <= '9'; c++){
                      if(isValid(board, i, j, c)){
                         board[i][j] = c;
                         if(helper(board) == true)
                            return true;
                         else board[i][j] = '.';
                      }
                   }
                  return false; 
               }
           }
        }
      return true; 
    }
    
    public boolean isValid(char[][] B, int row, int col, int c){
        
        for(int i = 0; i < 9; i++){
           if(B[i][col] == c) return false; // for checking c in every row
           if(B[row][i] == c) return false; // for checking c in every col
           if(B[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false;// for checking in 3x3 box
        }
       return true; 
    }
}
