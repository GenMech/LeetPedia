class Solution {
    int[][][] dp;
    
    public int cherryPickup(int[][] grid) {
        
        //Initializing 3-Dimensional DP Array
        int n=grid.length;
        dp=new int[n][n][n];
        
        int max=func(0,0,0,grid);
        return max < 0 ? 0: max;
    }
    
    public int func(int r1, int c1, int c2, int[][] grid)
    {
        // As r1+c1=r2+c2 (= No of steps moved from 0,0)
        int r2=r1+c1-c2;
        int n=grid.length;
        
        // edge cases to deal with array out of bound 
        // OR where thorns are present
        // Return the lowest value 
        if(r1>=n || r2>=n || c1>=n || c2>=n ||
           grid[r1][c1]==-1 || grid[r2][c2]==-1)
            return Integer.MIN_VALUE;
        
        // If memoization is already done for that position values of r1,r2,c1,c2
        // Return value from DP Array
        if(dp[r1][c1][c2]!=0) return dp[r1][c1][c2];
        
        
        // Memoization
        if(r1==n-1 && c1==n-1) return grid[r1][c1];
        
        // Value of particular position will be decided by the sum of both 
        // moving pointers. If both have different positions, we will sum them
        // Else, we will just count the cherry once.
        // BECAUSE, Ideally according to the probelm, if we picked the cherry once, 
        // we cannot pick it again in return journey. So both moving pointers are 
        // depicting both journeys simultaneously. That's why we have to couint it once.
        int ans=0;
        if(r1!=r2) ans=grid[r1][c1]+grid[r2][c2];
        else ans=grid[r1][c1];
        
        // Recursive functions for all possible moves combination of both pointers
        int downdown=func(r1+1,c1,c2,grid);
        int downright=func(r1+1,c1,c2+1,grid);
        int rightdown=func(r1,c1+1,c2,grid);
        int rightright=func(r1,c1+1,c2+1,grid);
        // Getting the best move for maximum value of collected cherries from above recursions and adding to 'ans' variable. And finnally returning it while putting same value in dp array !!
        return dp[r1][c1][c2]=ans+Math.max(downdown,Math.max(downright,(Math.max(rightright,rightdown))));
        
    }
}
