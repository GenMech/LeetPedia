class Solution {
    public String longestPalindrome(String s) {
        if(s.length() == 0){
            return "";
        }

        int start = 0;
        int end = 0;

        for(int i = 0; i < s.length(); i++){
            int len1 = expand(s,i,i); // if old length
            int len2 = expand(s,i,i+1); // if even length

            int len = Math.max(len1, len2);
            if(len > end - start){ // If just means we are setting new boundary, means are setting new boundary
                start = i - ((len-1)/2);
                end = i + (len/2); 
            }
        }
        return s.substring(start, end + 1);
    }

    public int expand(String s, int left, int right){
        if(s.length() == 0) return 0;

        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        return right - left - 1;
    }
}

// The -1 at line 30 is necessary because the while loop will increment left and right one additional time. 
// For example: zovxxvo: If your final indexes are 6 and 1, you end up with 7 and 0. 7-0-1=6, which is the length of the palindrome.


//  if (len > end - start) - start and end represents the index for the longest palindrome substring, so if the len (which is Math.max(len1, len2) is greater than the current largest palindrome substring then we want to update start and end
