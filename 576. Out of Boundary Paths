class Solution {
    private long[][][] memo;
    private int mod = 1_0000_00007;

    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        memo = new long[m+1][n+1][maxMove + 1];
         for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                Arrays.fill(memo[i][j], -1);
            }
        }
        return (int)helper(m, n, maxMove, startRow, startColumn);
    }

    public long helper(int m, int n, int maxMove, int row, int col) {
        
        if(maxMove < 0) {
            return 0;
        }

        // Boundary Condition
        if(row==m || col==n || row < 0 || col < 0) {
            return 1;
        }

        if(memo[row][col][maxMove] != -1) {
            return memo[row][col][maxMove];
        }

        long total = 0;
        long left = helper(m, n, maxMove-1, row, col-1);
        long right = helper(m, n, maxMove-1, row, col+1);
        long up = helper(m, n, maxMove-1, row-1, col);
        long down = helper(m, n, maxMove-1, row+1, col);

        total = ((left + right + up + down)%mod);
        memo[row][col][maxMove] = total;
        return total;
    }
}
