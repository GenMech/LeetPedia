class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i : nums){
            map.put(i, map.getOrDefault(i, 0) + 1); 
        }
        
        Queue<Integer> maxheap = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));
        
        for(int key : map.keySet()){
            maxheap.add(key);
        } 
        
        int ans[] = new int[k];
        for(int i = 0; i < k; i++){
            ans[i] = maxheap.poll();
        }
      return ans;  
    }
}

//(a,b) -> map.get(b) - map.get(a) is a lambda expression, Also known as a comparator.

// It's defining the 'priority' of the queue to be whichever number ( a or b ) is bigger.

// It works like this...

// If (a,b) -> map.get(b) - map.get(a) - It will start adding elements with their freq in decreasing order (in this case, it will be 3 2 1 (freq))
// if (a,b) -> map.get(a) - map.get(b) - It will start adding element with their freq in increasing order (in this case, it will be 1 2 3 (freq))
