class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        
        for(int[] arr: dp){
        Arrays.fill(arr, -1);
        }    
        
        int ans = helper(0, 0, m , n ,dp, obstacleGrid);
        return ans;
    }
    
    public int helper(int row, int col, int m, int n, int[][] dp, int[][] OG){
        
        if( row == m || col == n || OG[row][col] == 1){
            return 0;
        }

        if(row == m - 1 && col == n - 1){
            if(OG[row][col] == 1){
                return 0;
            }
            return 1;
        }
        
        if(dp[row][col] != -1){
            return dp[row][col];
        }
        
        int left  = helper(row + 1, col, m , n, dp, OG);
        int right = helper(row, col + 1, m, n, dp, OG);
        
        return dp[row][col] = left + right;
        
    }
}
