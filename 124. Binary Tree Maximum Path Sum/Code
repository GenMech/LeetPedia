/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int maxi = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        maxPathDown(root);
        return maxi;
    }
    
    private int maxPathDown(TreeNode node){
        
        if(node == null) return 0;
        int left = Math.max(maxPathDown(node.left), 0);
        int right = Math.max(maxPathDown(node.right), 0);
        
        maxi = Math.max(maxi, left + right + node.val);// now maxi value will be either the current max or the sum of left subtree right subtree and node val. For ex of tree is 1->2->3 then max sum will be the total of all three nodes mentioned here.
        
        return Math.max(left, right) + node.val; // but when returning the value to the next level, we need to decide which value is high, left or right and then add it to the node value to get the next value to be compared with.      
    
    }
    
}
