/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {

    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        return prev;
    }

        public ListNode helper(ListNode l1, ListNode l2) {
        
        ListNode ans = new ListNode(0);
        ListNode node = ans;
        int carry = 0;
        
        while(l1 != null || l2 != null || carry == 1){
            int sum = 0;
            if(l1 != null){
              sum += l1.val;
              l1 = l1.next;
            }
            if(l2 != null){
              sum += l2.val;
              l2 = l2.next;
            }
            sum += carry;
            carry = sum / 10;
            ListNode newNode = new ListNode(sum % 10);
            node.next = newNode;
            node = node.next;
            
        }
       return ans.next; // .next bcs we dont want 0 value ( we considered it initially )
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        ListNode ans = helper(l1, l2);
        return reverseList(ans);
    }
}
