class Solution {
    public int maximalRectangle(char[][] matrix) {
     
        int n = matrix.length;
        int m = matrix[0].length; 
        int max = 0;
        int[] height = new int[m];
        
        Arrays.fill(height, 0);

        for(int i = 0; i < n; i++){
           for(int j = 0; j < m; j++){
               if(matrix[i][j] == '1') height[j]++;
               else height[j] = 0;
           }
          int area = largestRectangleArea(height);
          max = Math.max(max, area);  
        }
       return max; 
    }
    
    public int largestRectangleArea(int[] heights) {
        int len = heights.length;
        Stack<Integer> s = new Stack<>();
        int maxArea = 0;
        for (int i = 0; i <= len; i++){
            while(!s.isEmpty() && (i == len || heights[s.peek()] >= heights[i])){
                int h = heights[s.peek()];
                s.pop();
                int width;
                if(s.isEmpty()) width = i;
                else width = i - s.peek() - 1;
                maxArea = Math.max(maxArea, width * h);
            }
           s.push(i); 
        }
        return maxArea;
    }
}
